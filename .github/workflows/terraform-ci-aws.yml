name: Reusable - Terraform CI (AWS - No Plan Minimal)

on:
  workflow_call:
    inputs:
      tflint:
        type: boolean
        required: false
        default: true
      additional_init_args:
        type: string
        required: false
        default: ""
      lock_timeout:
        type: string
        required: false
        default: "5m"
      # ---- Checkov Inputs ----
      checkov:
        type: boolean
        required: false
        default: false
      checkov_soft_fail:
        type: boolean
        required: false
        default: true
      checkov_frameworks:
        type: string
        required: false
        default: "terraform"
      checkov_skip_checks:
        type: string
        required: false
        default: ""
      checkov_var_file:
        type: string
        required: false
        default: ""
      checkov_args:
        type: string
        required: false
        default: ""
    secrets:
      ASSUME_ROLE_ARN:
        required: true
        description: "AWS IAM role to assume via OIDC for backend/provider init"
      DEVOPS_WORKFLOW_TOKEN:
        required: true
        description: "Reserved for future use (e.g., PR annotations/comments)"

jobs:
  terraform-ci:
    name: Terraform Static / Init Validation
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.pull_request.base.ref }}
    concurrency:
      group: terraform-ci-${{ github.workflow }}-${{ github.ref }}-${{ vars.WORKING_DIRECTORY }}
      cancel-in-progress: false
    env:
      TF_IN_AUTOMATION: "true"
      TF_INPUT: "false"
      WD: ${{ vars.WORKING_DIRECTORY }}
      TF_LOCK_TIMEOUT: ${{ inputs.lock_timeout }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ vars.terraform_version }}
          terraform_wrapper: false

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ASSUME_ROLE_ARN }}
          aws-region: ${{ vars.aws_region }}
          role-session-name: terraform-ci-${{ github.run_id }}
          role-duration-seconds: 7200

      - name: Show Terraform & AWS Caller
        shell: bash
        run: |
          terraform -version
          aws sts get-caller-identity || true

      # We just record the tfvars path (if provided) for visibility; not used in init/validate.
      - name: Register tfvars file (if provided)
        if: ${{ vars.terraform_tfvars != '' }}
        shell: bash
        run: |
          if [ ! -f "${{ vars.terraform_tfvars }}" ]; then
            echo "::warning::Declared tfvars file '${{ vars.terraform_tfvars }}' not found."
          else
            echo "TF_VARS_FILE=${{ vars.terraform_tfvars }}" >> "$GITHUB_ENV"
            echo "Using tfvars file: ${{ vars.terraform_tfvars }}"
          fi

      - name: Terraform FMT
        id: fmt
        shell: bash
        working-directory: ${{ env.WD }}
        run: |
          set -e
          terraform fmt -check -recursive || {
            echo "::error title=Terraform FMT::Formatting issues detected. Run 'terraform fmt -recursive'."
            terraform fmt -recursive -diff || true
            exit 1
          }

      - name: TFLint Install
        if: ${{ inputs.tflint }}
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: TFLint Run
        if: ${{ inputs.tflint }}
        id: tflint_run
        shell: bash
        working-directory: ${{ env.WD }}
        run: |
          if [ ! -f ".tflint.hcl" ]; then
            cat > .tflint.hcl <<'EOF'
            plugin "aws" {
            enabled = true
          }
          EOF
          fi
          tflint --init
          tflint --format compact

      - name: Checkov Scan
        if: ${{ inputs.checkov }}
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ${{ env.WD }}
          framework: ${{ inputs.checkov_frameworks }}
          quiet: true
          soft_fail: ${{ inputs.checkov_soft_fail }}
          skip_check: ${{ inputs.checkov_skip_checks }}
          var_file: ${{ inputs.checkov_var_file }}
          download_external_modules: true
          log_level: "WARNING"
          compact: true
          args: ${{ inputs.checkov_args }}

      - name: Terraform Init
        id: init
        shell: bash
        working-directory: ${{ env.WD }}
        env:
          TF_CLI_ARGS_init: "-lock-timeout=${{ env.TF_LOCK_TIMEOUT }}"
        run: |
          set -e
          terraform init -input=false ${{ inputs.additional_init_args }}

      - name: Terraform Validate
        id: validate
        shell: bash
        working-directory: ${{ env.WD }}
        run: terraform validate -no-color

      - name: Write Summary
        if: always()
        shell: bash
        run: |
          status () {
            case "$1" in
              success) echo "pass" ;;
              "") echo "n/a" ;;
              *) echo "fail" ;;
            esac
          }
          {
            echo "## ✅ Terraform CI (Minimal)"
            echo ""
            echo "**Directory:** \`${{ env.WD }}\`"
            if [ -n "${TF_VARS_FILE:-}" ]; then
              echo "- tfvars file: \`${TF_VARS_FILE}\` (located under vars/)"
            else
              echo "- tfvars file: (none specified)"
            fi
            echo ""
            echo "| Check | Status | Mode |"
            echo "|-------|--------|------|"
            echo "| fmt | $(status '${{ steps.fmt.outcome }}') | strict |"
            echo "| init | $(status '${{ steps.init.outcome }}') | strict |"
            echo "| validate | $(status '${{ steps.validate.outcome }}') | strict |"
            if [ "${{ inputs.tflint }}" = "true" ]; then
              echo "| tflint | $(status '${{ steps.tflint_run.outcome }}') | strict |"
            fi
            if [ "${{ inputs.checkov }}" = "true" ]; then
              mode="soft"
              if [ "${{ inputs.checkov_soft_fail }}" = "false" ]; then mode="strict"; fi
              echo "| checkov | $(status '${{ steps.checkov.outcome }}') | $mode |"
            fi
            echo ""
            echo "- AWS Region: ${{ vars.aws_region }}"
            echo "- Assumed Role: yes"
            echo ""
            echo "_Workflow: ${{ github.workflow }} • Run ID: ${{ github.run_id }}_"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Fail if Any Previous Failed
        if: ${{ failure() }}
        run: |
          echo "One or more Terraform CI validation steps failed."
          exit 1